let $TMPDIR="/tmp"

set shell=zsh
" set shell=bash

"Выключаем совместимость с vi
set nocompatible
"чистим
syntax off
filetype on
filetype off
autocmd!

" Enable mouse use in all modes
set mouse=a

"long history
set history=1000
"no BEEEP
set visualbell
set autoread
"копируем в буфер
set clipboard=unnamed

" gundo
nnoremap <leader>u    :GundoToggle<CR>

"Сплиты
nnoremap <leader>sw<left>  :topleft  vnew<CR>
nnoremap <leader>sw<right> :botright vnew<CR>
nnoremap <leader>sw<up>    :topleft  new<CR>
nnoremap <leader>sw<down>  :botright new<CR>

nnoremap <leader>s<left>   :leftabove  vnew<CR>
nnoremap <leader>s<right>  :rightbelow vnew<CR>
nnoremap <leader>s<up>     :leftabove  new<CR>
nnoremap <leader>s<down>   :rightbelow new<CR>


"показываем команды
set showcmd
"показываем номера строк
set nu
"инкрементный поиск
set incsearch
"подсветка поиска
set hlsearch
"переключить подсветку по \+Enter
nnoremap <silent> <leader><CR> :noh<CR>
"умный поиск
set ignorecase
set smartcase

"кодировка терминала
set termencoding=utf-8

"авто отступы
set cindent
set autoindent
set smartindent
set breakindent
set breakindentopt=shift:4,sbr

"табуляция в 4 пробела, замена <TAB> пробелом
set expandtab
set shiftwidth=4
set softtabstop=4
set tabstop=4

"каталог для свопов и бекапа
set directory=~/.vimtemp/swap//
set viewdir=~/.vimtemp/view//
set undodir=~/.vimtemp/undodir//
set backupdir=~/.vimtemp/backup//

"фолдинг
set foldmethod=manual   "fold based on indent
set foldcolumn=3
set foldnestmax=3       "deepest fold is 3 levels
set nofoldenable        "dont fold by default

"показываем невидимые символы
" Shortcut to rapidly toggle `set list`
set list
set listchars=tab:▸\ ,eol:¶,nbsp:¬
nnoremap <leader>l :set list!<CR>

"format options
set fo+=cr

"Отступы в визуальных блоках
vnoremap < <gv
vnoremap > >gv


call plug#begin()
Plug 'rking/ag.vim'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'

Plug 'sjl/gundo.vim'
Plug 'mhinz/vim-signify'
Plug 'tpope/vim-fugitive'

Plug 'tmhedberg/matchit'
Plug 'junegunn/vim-easy-align'
Plug 'easymotion/vim-easymotion'

Plug 'kshenoy/vim-signature'
Plug 'Yggdroot/indentLine'
Plug 'jnurmine/Zenburn'

Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-ragtag'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'

Plug 'will133/vim-dirdiff'

Plug 'w0rp/ale'
" Plug 'vim-syntastic/syntastic'
" Plug 'alessioalex/syntastic-local-tslint.vim'
" Plug 'mtscout6/syntastic-local-eslint.vim'
Plug 'mattn/emmet-vim'
Plug 'editorconfig/editorconfig-vim'

Plug 'lifepillar/vim-mucomplete'

Plug 'docker/docker', { 'rtp': '/contrib/syntax/vim/', 'for': ['dockerfile'] }

Plug 'groenewege/vim-less', { 'for': ['less'] }

Plug 'plasticboy/vim-markdown', { 'for': ['markdown'] }

Plug 'saltstack/salt-vim', { 'for': ['salt'] }

Plug 'stephpy/vim-yaml', { 'for': ['yaml'] }

Plug 'rust-lang/rust.vim', { 'for': ['rust'] }
Plug 'cespare/vim-toml', { 'for': ['toml'] }

Plug 'fatih/vim-go', { 'for': ['go'] }

Plug 'Shougo/unite.vim'
Plug 'Shougo/vimproc.vim', {'do' : 'make'}

" Plug 'leafgarland/typescript-vim', { 'for': 'typescript' }
Plug 'HerringtonDarkholme/yats.vim', { 'for': 'typescript' }
Plug 'Quramy/tsuquyomi', { 'for': 'typescript' }
" Plug 'Quramy/vim-dtsm', { 'for': 'typescript' }

" Plug 'pangloss/vim-javascript', { 'for': ['javascript', 'javascript.jsx'] }
Plug 'othree/yajs.vim', { 'for': ['javascript'] }
Plug 'mxw/vim-jsx', { 'for': ['javascript.jsx'] }
Plug 'kelan/gyp.vim', { 'for': ['gyp'] }
Plug 'briancollins/vim-jst', { 'for': ['jst', 'ejs'] }

Plug 'b4b4r07/vim-hcl'

Plug 'lifepillar/vim-cheat40'
Plug 'lifepillar/pgsql.vim'

call plug#end()            " required


"включаем цветовую схему zenburn
if has('gui_running')
  colorscheme zenburn
  set background=dark
else
  set t_Co=256
  colorscheme zenburn
endif

"ale
let g:ale_lint_on_text_changed = 'never'
let g:ale_sign_column_always = 1
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '>>'
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 0
let g:ale_open_list = 0

" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0
" let g:syntastic_typescript_checkers = ['tsuquyomi', 'tslint']

noremap <silent> <leader>d :ALEDetail<CR>
function! LinterStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))
    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors

    return l:counts.total == 0 ? 'OK' : printf('%dW %dE', all_non_errors, all_errors)
endfunction


set laststatus=2
if has("statusline")
  "сбрасываем в начале
  set statusline=%<
  "флаг хелпа
  set statusline+=%h
  "флаг модификации файла
  set statusline+=%m
  "фалы только для чтения
  set statusline+=%#error#%r%*\ 
  "имя файла
  set statusline+=\ %f\ 
  "тип файла
  set statusline+=%y
  "формат файла
  set statusline+=[%{&ff}]
  "кодировка и наличие BOM
  set statusline+=%{\"[\".(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\").\"]\ \"}
  " set statusline+=\ %{SyntasticStatuslineFlag()}
  "fugitive
  set statusline+=%{fugitive#statusline()}
  "дальше привязка к правому краю
  set statusline+=%=
  set statusline+=%{LinterStatus()}\ \|\ 
  " set statusline+=%{SyntasticStatuslineFlag()}
  "значение символа под курсором
  set statusline+=Dec:%04.b\/Hex:0x%04.B\ \|\ %l/%L,%c%V\ \|\ 
  "позиция курсора и проценты
  set statusline+=%P\ 
endif

"для репит плагина 
silent! call repeat#set("\<Plug>MyWonderfulMap", v:count)

"русский с йо
set spelllang=ru_yo,en_us

" меняем подсветку диффов
highlight DiffAdd     ctermfg=108 guifg=#7f9f7f guibg=#333333
highlight DiffChange  ctermfg=12  guifg=#8c8cbc guibg=#333333
highlight DiffDelete  ctermfg=174 guifg=#cc9393 guibg=#333333

" открываем зипы
au BufReadCmd   *.epub      call zip#Browse(expand("<amatch>"))
au BufReadCmd   *.qb        call zip#Browse(expand("<amatch>"))
au BufReadCmd   *.odt       call zip#Browse(expand("<amatch>"))

autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
noremap <silent> <leader>n :NERDTreeToggle<CR> <C-w>=
noremap <silent> <leader>f :NERDTreeFind<CR> <C-w>=

" Enable omni completion.
set showmode
set shortmess+=cI
set completeopt=menu
set completeopt+=menuone
" set completeopt+=longest
set completeopt+=preview
set completeopt+=noinsert
set completeopt+=noselect

set omnifunc=syntaxcomplete#Complete
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType typescript set omnifunc=tsuquyomi#complete


" inoremap <expr> <Tab> <plug>(MUcompleteCycFwd)
" inoremap <expr><Tab>  pumvisible() ? "\<C-j>" : "\<Tab>"
" inoremap <expr><S-Tab>  pumvisible() ? "\<C-h>" : "\<S-Tab>"

let g:mucomplete#cycle_all = 1
let g:mucomplete#cycle_with_trigger = 1
let g:mucomplete#always_use_completeopt = 1
let g:mucomplete#enable_auto_at_startup = 1
let g:mucomplete#buffer_relative_paths = 1

let g:mucomplete#chains = {}
let g:mucomplete#chains.default = ['omni', 'incl', 'path']
let g:mucomplete#chains.typescript = ['omni', 'incl', 'path']

inoremap <expr> <Up>    pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <Down>  pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <CR>    pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

nnoremap <leader>i :IndentLinesToggle<CR>
let g:indentLine_enabled = 0
let g:indentLine_faster = 1
let g:indentLine_setConceal = 0

" different indents
autocmd FileType typescript setlocal indentkeys+=0

" typescript
let g:tsuquyomi_disable_quickfix = 1

autocmd FileType typescript nmap <buffer> <Leader>t : <C-u>echo tsuquyomi#hint()<CR>

autocmd FileType ruby setlocal expandtab shiftwidth=2 tabstop=2
autocmd FileType lua setlocal expandtab shiftwidth=2 tabstop=2

autocmd FileType go setlocal listchars=tab:\ \ ,eol:¶,nbsp:¬
autocmd FileType go setlocal shiftwidth=2
autocmd FileType go setlocal tabstop=2
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1
let g:go_metalinter_autosave = 0
let g:ale_linters = {
            \'go': ['golint', 'go vet', 'go build'],
            \'css': ['stylelint'],
            \'typescript': ['tslint', 'tsserver'],
            \}


"sort
vnoremap <leader>s :sort<CR>

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

syntax on
filetype plugin indent on
